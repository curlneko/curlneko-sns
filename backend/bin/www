#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
const { Server } = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8083');
app.set('port', port);

/**
 * Create HTTP server.
 */

var httpServer = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);


const io = new Server(httpServer, {
  cors: {
    origin: "http://localhost:3000",
    credentials: true
  },
});

io.on('connection', (socket) => {
  console.log('a user connected');
  console.log(socket.rooms); // Set { <socket.id> }
  socket.join("room1");
  console.log(socket.rooms); // Set { <socket.id>, "room1" }
  // io.to("room1").emit("a new user has joined the room");
  // socket.leave("room1");
  // io.to("room1").emit(`user ${socket.id} has left the room`);

  socket.emit("hello", "world", (response) => {
    console.log(response); // "got it"
  });

  socket.emit("chatMsg", {1:{text:"hi"},2:{text:"how are you"}}, (response) => {
    console.log(response); // "got it"
  });

  socket.on("hello", (arg) => {
    console.log(arg); // world
  });

  socket.on("disconnecting", (reason) => {
    console.log('a user disconnecting');
  });

  socket.on("disconnect", (reason) => {
    console.log('a user disconnected');
  });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
